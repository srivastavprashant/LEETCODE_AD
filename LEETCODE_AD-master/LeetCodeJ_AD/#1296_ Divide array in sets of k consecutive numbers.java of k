/*
  LINK: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers
  
  Approach: Each set will have values from min element left in the array to min+k-1.
            Just check for the existence of each element and update the value of min.
*/

class Solution {
    public boolean isPossibleDivide(int[] nums, int k) 
    {
        HashMap<Integer, Integer> map=new HashMap<Integer, Integer>(); // Elements along with there frequencies
        int min= Integer.MAX_VALUE, max=0;
        
        // Loop to intialize the map with its values
        for(int i=0;i<nums.length;i++)
        {
            min= Math.min(min, nums[i]);
            max= Math.max(max, nums[i]);
            if(map.containsKey(nums[i]))
                map.put(nums[i], map.get(nums[i])+1);
            else
                map.put(nums[i], 1);
        }
        
        if(nums.length%k!=0)    // We cant partition the array equally if k is not a factor. 
            return false;
        else
        {
            int parts= nums.length/k;
            do
            {
                int start= min;
                for(int i= 0; i<k; i++)
                {
                    if(map.containsKey(min+i) && map.get(min+i)!=0)
                    {
                        map.put(min+i, map.get(min+i)-1);
                        
                        if(map.get(start)==0)
                            while((!map.containsKey(++start) || map.get(start)==0)&& start<= max);
                    }
                    else
                        return false;
                }
                min= start;
            }while(--parts!=0);
        }
        return true;
    }
}
